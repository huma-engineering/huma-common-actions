name: Deploy the Huma Server Helm chart to GKE

on:
  workflow_call:
    inputs:
      server_name: { required: true, type: string }
      include_sdk: { required: true, type: boolean }
      cluster_name: { required: false, type: string, default: 'hu-uk-sandbox-pr-preview-gke' }
      cluster_location: { required: false, type: string, default: 'europe-west2' }
      atlas_cluster: { required: false, type: string, default: 'hu-uk-sandbox-pr-preview' }
      atlas_project: { required: false, type: string, default: 'hu-sandbox' }
      atlas_project_url: { required: false, type: string, default: 'https://cloud.mongodb.com/v2/5f1313011621fe3c7268a8b1' }
      db_dump_bucket_name: { required: false, type: string, default: 'hu-europe2-github-action-pr-preview-bucket' }
      kubedb_cluster: { required: true, type: string }
      kubedb_namespace: { required: false, type: string, default: 'kubedb' }
      grafana_host: { required: true, type: string }
      grafana_cluster_name: { required: true, type: string }
      host_postfix: { required: true, type: string }
      source_gcs_bucket_qa: { required: true, type: string }
      source_gcs_bucket_dev: { required: true, type: string }
      source_s3_bucket_qa: { required: true, type: string }
      source_s3_bucket_dev: { required: true, type: string }
      make_upload_chart_command: { required: true, type: string }
      aws_region: { required: false, type: string, default: 'eu-west-2' }
      dockerfile: { required: true, type: string }
      make_build_push_ghcr: { required: true, type: string }
      docker_image_name: { required: true, type: string, description: 'Docker image name of make file' }
      docker_temp_tag_format: { required: true, type: string, description: 'Docker tag format in PRs' }
      helm_extra_values_file: { required: true, type: string }
      server_extra_config_file: { required: true, type: string }

env:
  app_name: ${{ inputs.server_name }}-${{ github.event.issue.number }}
  app_namespace: pr-preview-${{ inputs.server_name }}-${{ github.event.issue.number }}
  bucket_provider: ${{ contains(github.event.comment.body, '--storage=gcs') && 'gcs' || 's3' }}
  db_provider: ${{ contains(github.event.comment.body, '--mongodb=atlas') && 'atlas' || 'kubedb' }}
  db_user: ${{ inputs.server_name }}-${{ github.event.issue.number }}-db
  full_db_dump_prefix: ${{ contains(github.event.comment.body, '--db-full') && 'full_' || '' }}
  issue_number: ${{ github.event.issue.number }}
  host_postfix: ${{ inputs.server_name }}-${{ github.event.issue.number }}.${{ inputs.host_postfix }}
  source_db_name: ${{ contains(github.event.comment.body, '--env=qa') && 'pp_qa' || 'pp_dev' }}
  source_gcs_bucket: ${{ contains(github.event.comment.body, '--env=qa') &&
    inputs.source_gcs_bucket_qa || inputs.source_gcs_bucket_dev }}
  source_s3_bucket: ${{ contains(github.event.comment.body, '--env=qa') &&
    inputs.source_s3_bucket_qa || inputs.source_s3_bucket_dev }}
  update_chart: ${{ contains(github.event.comment.body, '--update-chart') && true || false }}
  helm_chart_path: ${{ github.action_path }}/../deploy/charts/infrastructure/Chart.yaml

jobs:
  check:
    name: Deploy command received
    if: ${{ github.event.issue.pull_request
      && github.event.issue.state == 'open'
      && startsWith(github.event.comment.body, '/deploy') }}
    runs-on: ubuntu-latest
    outputs:
      head_ref: ${{ steps.comment-branch.outputs.head_ref }}
      head_sha: ${{ steps.comment-branch.outputs.head_sha }}
      short_sha: ${{ steps.sha.outputs.short_sha }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - id: sha
        name: Get the short of Github commit SHA
        run: |-
          SHORT_SHA=$(echo ${{ steps.comment-branch.outputs.head_sha }} | cut -c1-7)
          echo "::set-output name=short_sha::$SHORT_SHA"

      - name: Put reaction on the command message
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes

      - name: Describe the command to perform
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Executing the command: `/deploy ${{ format('{0} {1} {2}{3}{4}',
            contains(github.event.comment.body, '--env=qa') && '--env=qa' || '--env=dev',
            contains(github.event.comment.body, '--mongodb=atlas') && '--mongodb=atlas' || '--mongodb=kubedb',
            contains(github.event.comment.body, '--storage=gcs') && '--storage=gcs' || '--storage=s3',
            contains(github.event.comment.body, '--db-full') && ' --db-full' || '',
            contains(github.event.comment.body, '--update-chart') && ' --update-chart' || '') }}`
            [The corresponding Github CI workflow run](${{ format('{0}/{1}/actions/runs/{2}',
              github.server_url, github.repository, github.run_id) }})

  chart:
    name: Package and upload the Helm chart
    needs: check
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.helm.outputs.version }}
    steps:
      - uses: huma-engineering/huma-common-actions/.github/actions/package-upload-helm-chart@HCA-NA-add-huma-server-actions
        name: Deploy the Helm chart to GKE
        id: helm
        with:
          head_sha: ${{ needs.check.outputs.head_sha }}
          include_sdk: ${{ inputs.include_sdk }}
          sdk_ssh_key: ${{ secrets.SSH_KEY_TO_HUMA_SERVER_SDK }}
          short_sha: ${{ needs.check.outputs.short_sha }}
          update_chart: ${{ env.update_chart }}

  build:
    needs: check
    name: Build and Push Container
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Clone Submodule
        if: ${{ inputs.include_sdk }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY_TO_HUMA_SERVER_SDK }}
          repository: huma-engineering/huma-server-sdk
          path: libs/huma-server-sdk
          ref: master
      - name: Login to ghcr
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push to ghcr
        id: build
        env:
          DOCKER_BUILDKIT: "1"
        run: |-
          make ${{ inputs.make_build_push_ghcr }} && error=0 || error=$?
          echo "::set-output name=error::$error"
      # - name: Build and Push Container
      #   id: build
      #   uses: huma-engineering/huma-github-actions/build-server-sdk-container@v0.14.0
      #   with:
      #     tag: ${{ env.app_namespace }}-${{ needs.check.outputs.short_sha }}
      #     github_ref: ${{ needs.check.outputs.head_sha }}
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     github_user: ${{ github.actor }}
      #     registry: ghcr.io
      #     repository: ghcr.io/huma-engineering/py-${{ inputs.server_name }}
      #     dockerfile: ${{ inputs.dockerfile }}

      - name: Report on build success
        if: steps.build.outputs.error == 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Built a new version of the container from the branch `${{needs.check.outputs.head_ref}}`,
            commit ${{needs.check.outputs.head_sha}}, and pushed it to GHCR.üëå

      - name: Report on build failure
        if: steps.build.outputs.error != 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Failed to build and push container from the branch `${{needs.check.outputs.head_ref}}`,
            commit ${{needs.check.outputs.head_sha}}.‚ùå

  deploy:
    name: Deploy the infrastructure Helm chart to GKE
    needs:
      - check
      - chart
    runs-on: ubuntu-latest
    outputs:
      dashboard_url: ${{ steps.dashboard.outputs.url }}
      error: ${{ steps.helm.outputs.error }}
    steps:
      - name: Deploy the Helm chart to GKE
        id: helm
        uses: huma-engineering/huma-common-actions/.github/actions/deploy-helm-chart-to-gke@HCA-NA-add-huma-server-actions
        with:
          cluster_name: ${{ inputs.cluster_name }}
          location: ${{ inputs.cluster_location }}
          app_name: ${{ env.app_name }}
          app_namespace: ${{ env.app_namespace }}
          atlas_cluster: ${{ inputs.atlas_cluster }}
          atlas_project: ${{ inputs.atlas_project }}
          bucket_provider: ${{ env.bucket_provider }}
          db_provider: ${{ env.db_provider }}
          kubedb_namespace: ${{ inputs.kubedb_namespace }}
          kubedb_cluster: ${{ inputs.kubedb_cluster }}
          image_repository: ghcr.io/huma-engineering/${{ inputs.docker_image_name }}
          # NOTE: an image_tag should be the same as in job.build
          image_tag_format: ${{ docker_temp_tag_format }}
          chart_url: oci://ghcr.io/huma-engineering/helm-charts/huma-backend-requisites
          version: ${{ needs.chart.outputs.version }}
          gcp_credentials: ${{ secrets.GKE_SA_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clean_workload: "true"
          helm_extra_values_file: ${{ inputs.helm_extra_values_file }}
          server_extra_config_file: ${{ inputs.server_extra_config_file }}
          py_path_in_docker: /server/dct_server.py
          short_sha: ${{ needs.check.outputs.short_sha }}

      - name: Create Grafana logs dashboard
        id: dashboard
        if: steps.helm.outputs.error == 0
        uses: huma-engineering/huma-github-actions/create-grafana-logs-dashboard@v0.14.0
        with:
          app_name: ${{ env.app_name }}
          app_namespace: ${{ env.app_namespace }}
          cluster_name: ${{ inputs.grafana_cluster_name }}
          grafana_api_key: ${{ secrets.PR_PREVIEW_GRAFANA_API_KEY }}
          grafana_host: ${{ inputs.grafana_host }}

      - name: Report on deploy success
        if: steps.helm.outputs.error == 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Deployed a new version of the ${{ inputs.server_name }} container built from the commit ${{
              needs.check.outputs.head_sha }}, the helm chart version `${{ needs.chart.outputs.version }}`.üëå
            Created the connected storage bucket, database and cache.
            Created a new [Grafana dashboard with ${{ inputs.server_name }} logs](${{ inputs.grafana_host }}${{
              steps.dashboard.outputs.url }}).
            [The corresponding Github CI workflow run](${{ format('{0}/{1}/actions/runs/{2}',
                github.server_url, github.repository, github.run_id) }})

      - name: Report on deploy failure
        if: steps.helm.outputs.error != 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Failed to deploy a new version of the ${{ inputs.server_name }} container built from the commit ${{
              needs.check.outputs.head_sha }}, the helm chart version `${{ needs.chart.outputs.version }}`.‚ùå
            [The corresponding Github CI workflow run](${{ format('{0}/{1}/actions/runs/{2}',
              github.server_url, github.repository, github.run_id) }})

  restore-db:
    name: Restore MongoDB dump
    needs: deploy
    runs-on: ubuntu-latest
    outputs:
      error: ${{ steps.restore.outputs.error }}
    steps:
      - name: Restore MongoDB dump
        id: restore
        uses: huma-engineering/huma-github-actions/restore-mongodb-archived-db@v0.19.0
        with:
          app_namespace: ${{ env.app_namespace }}
          archive_name: ${{ format('{0}dump_hs_sandbox_{1}.gz',
            env.full_db_dump_prefix, env.source_db_name) }}
          bucket_name: ${{ inputs.db_dump_bucket_name }}
          cluster_name: ${{ inputs.cluster_name }}
          db_provider: ${{ env.db_provider }}
          db_user: ${{ env.db_user }}
          gcp_credentials: ${{ secrets.GKE_SA_KEY }}
          location: ${{ inputs.cluster_location }}
          restore_options: ${{ env.full_db_dump_prefix != '' && '--numInsertionWorkersPerCollection=2' || '' }}
          source_db_name: ${{ env.source_db_name }}
          rename_bucket: ${{ env.source_gcs_bucket }}

      - name: Report on restore-db success
        if: ${{ steps.restore.outputs.error == 0 }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Restored the latest snapshot of application database.üëå
            Your MongoDB provider is ${{ env.db_provider == 'atlas' && 'Atlas' || 'KubeDB' }}.

      - name: Report on restore-db failure
        if: ${{ steps.restore.outputs.error != 0 }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Failed to restore application database snapshot.‚ùå
            Your MongoDB provider is ${{ env.db_provider == 'atlas' && 'Atlas' || 'KubeDB' }}.

  copy-bucket:
    name: Clone the selected source bucket to a new GCS or S3 bucket
    needs: deploy
    outputs:
      error: ${{ env.bucket_provider == 'gcs' && steps.sync_gcs.outputs.error || steps.sync_s3.outputs.error }}
    runs-on: ubuntu-latest
    steps:
      - name: Clone the selected source bucket to a new S3 bucket
        id: sync_s3
        if: env.bucket_provider == 's3'
        uses: huma-engineering/huma-github-actions/sync-s3-bucket-snapshot-to-composed-bucket@v0.15.0
        with:
          cluster_name: ${{ inputs.cluster_name }}
          location: ${{ inputs.cluster_location }}
          app_namespace: ${{ env.app_namespace }}
          secret_name: ${{ env.app_name }}-bucket-secret
          gcp_credentials: ${{ secrets.GKE_SA_KEY }}
          source_bucket: ${{ env.source_s3_bucket }}
          aws_access_key_id: ${{ secrets.PR_PREVIEW_AWS_HUMA_SANDBOX_IAM_USER_KEY_ID }}
          aws_secret_access_key: ${{ secrets.PR_PREVIEW_AWS_HUMA_SANDBOX_IAM_USER_SECRET_KEY }}
          aws_region: ${{ inputs.aws_region }}

      - name: Report on clone S3 bucket success
        if: env.bucket_provider == 's3' && steps.sync_s3.outputs.error == 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Synced an existing snapshot S3 bucket to a composed bucket.üëå

      - name: Report on clone S3 bucket failure
        if: env.bucket_provider == 's3' && steps.sync_s3.outputs.error != 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Failed to sync an existing snapshot S3 bucket to a composed bucket.‚ùå

      - name: Clone the selected source bucket to a new GSC bucket
        id: sync_gcs
        if: env.bucket_provider == 'gcs'
        uses: huma-engineering/huma-github-actions/clone-gcs-buckets@v0.18.0
        with:
          app_namespace: ${{ env.app_namespace }}
          cluster_name: ${{ inputs.cluster_name }}
          destination_bucket: ${{ env.app_name }}-bucket
          gcp_credentials: ${{ secrets.GKE_SA_KEY }}
          location: ${{ inputs.cluster_location }}
          source_bucket: ${{ env.source_gcs_bucket }}

      - name: Report on clone GCS bucket success
        if: env.bucket_provider == 'gcs' && steps.sync_gcs.outputs.error == 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Cloned the selected source bucket to a new GSC bucket.üëå

      - name: Report on clone GCS bucket failure
        if: env.bucket_provider == 'gcs' && steps.sync_gcs.outputs.error != 0
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            Failed to clone the selected source bucket to a new GSC bucket.‚ùå

  # backend:
  #   name: Deploy backend services
  #   needs:
  #     - build
  #     - restore-db
  #     - copy-bucket
  #     - check
  #     - deploy
  #   if: ${{ needs.deploy.outputs.error == 0 && needs.restore-db.outputs.error == 0 &&
  #     needs.copy-bucket.outputs.error == 0 }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy the service
  #       id: deploy-backend
  #       uses: huma-engineering/huma-common-actions/.github/actions/deploy-backend-to-k8s@HCA-NA-add-huma-server-actions
  #       with:
  #         value_file: deploy/helmfile/values/gcp/values.gcp-uk-sandbox.yaml
  #         short_sha: ${{ needs.check.outputs.short_sha }}
  #         connect_vpn: false
  #         environment: 'Sandbox'
  #         kube_type: GKE
  #         gke_key: ${{ secrets.GKE_SA_KEY }}
  #         gke_cluster_name: ${{ inputs.cluster_name }}
  #         gke_cluster_location: ${{ inputs.cluster_location }}
  #         helmfile_environment: gcp-uk-sandbox
  #         fill_placeholders: true
  #         placeholder_namespace: ${{ env.app_namespace }}
  #         placeholder_api:
  #         placeholder_web: { description: 'Website domain to be replaced', required: false }
  #         placeholder_db_name: { description: 'Database name to be replaced', required: false }
  #         placeholder_gcp_bucket: { description: 'GCP bucket to be replaced', required: false }

  report:
    name: Send a preview URL to user
    needs:
      - build
      - restore-db
      - copy-bucket
      - check
      - deploy
      # - backend
    if: ${{ needs.deploy.outputs.error == 0 && needs.restore-db.outputs.error == 0 &&
      needs.copy-bucket.outputs.error == 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud via a Service Account Key JSON
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ inputs.cluster_name }}
          location: ${{ inputs.cluster_location }}

      - name: Read bucket connection secret
        id: bucket_secret
        env:
          namespace: ${{ env.app_namespace }}
          secret: ${{ env.app_name }}-bucket-secret
        run: |-
          bucket=$(kubectl get -n $namespace secrets/$secret \
            --template={{.data.bucket_name}} | base64 --decode)
          region=$(kubectl get -n $namespace secrets/$secret \
            --template={{.data.region}} | base64 --decode)
          echo "::set-output name=bucket::$bucket"
          echo "::set-output name=region::$region"

      - name: Read DB connection secret
        id: db_secret
        env:
          namespace: ${{ env.app_namespace }}
          secret: ${{ env.db_user }}
        run: |-
          password=$(kubectl get -n $namespace secrets/$secret \
            --template={{.data.password}} | base64 --decode)
          username=$(kubectl get -n $namespace secrets/$secret \
            --template={{.data.user}} | base64 --decode)
          mongo_uri=$(kubectl get -n $namespace secrets/$secret \
            --template={{.data.connectionString}} | base64 --decode)
          echo "::add-mask::$password"
          echo "::add-mask::$username"
          echo "::add-mask::$mongo_uri"
          echo "::set-output name=username::$username"
          echo "::set-output name=password::$password"
          echo "::set-output name=mongo_uri::$mongo_uri"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone Submodule
        if: ${{ inputs.include_sdk }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY_TO_HUMA_SERVER_SDK }}
          repository: huma-engineering/huma-server-sdk
          path: libs/huma-server-sdk
          ref: master

      - name: Print the urls in a comment
        id: template
        uses: huma-engineering/huma-common-actions/.github/actions/print-deploy-result@HCA-NA-add-huma-server-actions
        with:
          update_chart: ${{ inputs.update_chart }}
          server_name: ${{ inputs.server_name }}
          host: ${{ env.host_postfix }}
          grafana_host: ${{ inputs.grafana_host }}
          atlas_project_url: ${{ inputs.atlas_project_url }}
          atlas_project: ${{ inputs.atlas_project }}
          atlas_cluster: ${{ inputs.atlas_cluster }}
          app_name: ${{ env.app_name }}
          db_user: ${{ env.db_user }}
          db_provider: ${{ env.db_provider }}
          bucket_provider: ${{ env.bucket_provider }}
          db_username: ${{ steps.db_secret.outputs.username }}
          db_password: ${{ steps.db_secret.outputs.password }}
          mongo_uri: ${{ steps.db_secret.outputs.mongo_uri }}
          dashboard_url: ${{ needs.deploy.outputs.dashboard_url }}
          bucket: ${{ steps.bucket_secret.outputs.bucket }}
          bucket_region: ${{ steps.bucket_secret.outputs.region }}

      - name: Put a ready to use comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.issue_number }}
          body: |-
            ${{ steps.template.outputs.result }}
            [The corresponding Github CI workflow run](${{ format('{0}/{1}/actions/runs/{2}',
              github.server_url, github.repository, github.run_id) }})

      - name: Put reaction on the command message
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket

      - uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: deployed

      - if: env.db_provider == 'atlas'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: deployed_atlas_mongodb

      - if: env.bucket_provider == 'gcs'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: deployed_gcs_bucket
