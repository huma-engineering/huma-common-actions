name: Publish to DEV/QA env

on:
  workflow_call:
    inputs:
      server_name: { required: true, type: string }
      include_sdk: { required: true, type: boolean }
      sdk_ref: { required: false, type: string }
      enable_dev: { required: false, type: boolean }
      enable_qa: { required: false, type: boolean }

# yamllint disable rule:line-length

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Clone Submodule
        if: ${{ inputs.include_sdk == 'true' }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY_TO_HUMA_SERVER_SDK }}
          repository: huma-engineering/huma-server-sdk
          path: libs/huma-server-sdk
          ref: ${{ inputs.sdk_ref }}
      - name: Run Test Suit
        id: run_tests
        env:
          DOCKER_BUILDKIT: "1"
        run: make ${{ inputs.server_name }}/tests/docker-compose
      - name: Store unit pytest results
        uses: actions/upload-artifact@v3
        with:
          name: unit-pytest.log
          path: ./testresults/unit-pytest.log
      - name: Store integration pytest results
        uses: actions/upload-artifact@v3
        with:
          name: integration-pytest.log
          path: ./testresults/integration-pytest.log
      - name: Store unit junit report
        uses: actions/upload-artifact@v3
        with:
          name: unit-junitresult.xml
          path: ./testresults/unit-junitresult.xml
      - name: Store integration junit report
        uses: actions/upload-artifact@v3
        with:
          name: integration-junitresult.xml
          path: ./testresults/integration-junitresult.xml
      - name: Publish code coverage results
        env:
          prNumber: ${{ github.event.pull_request.number }}
        run: |
          make common/git-full-tests-code-cov-pr-comment
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
      - name: Store Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: pr-tests-coverage
          path: pr-tests-coverage.txt
      - name: Store Tests Coverage XML Report
        if: steps.run_tests.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-xml-report
          path: |
            ./testresults/coverage-unit-tests.xml
            ./testresults/coverage-integration-tests.xml
  publish_coverage_results:
    name: Publish Tests Coverage Results
    needs: tests
    if: success()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Download tests
        uses: actions/download-artifact@v3
        with:
          name: pr-tests-coverage
      - name: Merge Tests Coverage Files
        run: |
          make common/git-tests-code-cov-pr-comment
      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Coverage
      - id: get-comment-body
        if: github.event_name == 'pull_request'
        run: |
          echo 'comment_body<<EOV' >> $GITHUB_ENV
          cat pr-tests-coverage.txt >> $GITHUB_ENV
          echo 'EOV' >> $GITHUB_ENV
      - name: Create or update comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ env.comment_body }}
          edit-mode: replace

  publish_test_results:
    name: Publish Tests Results
    needs: tests
    if: success()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Download unit tests
        uses: actions/download-artifact@v3
        with:
          name: unit-junitresult.xml
          path: ./testresults/
      - name: Download integration tests
        uses: actions/download-artifact@v3
        with:
          name: integration-junitresult.xml
          path: ./testresults/
      - name: Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: "PR Test Results"
          files: testresults/**/*.xml

  build_and_push:
    name: Build and push py-${{ inputs.server_name }} image
    needs: tests
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Clone Submodule
        if: ${{ inputs.include_sdk == 'true' }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY_TO_HUMA_SERVER_SDK }}
          repository: huma-engineering/huma-server-sdk
          path: libs/huma-server-sdk
          ref: ${{ inputs.sdk_ref }}
      - name: Login to ghcr
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push to ghcr
        env:
          DOCKER_BUILDKIT: "1"
        run: make ${{ inputs.server_name }}/push/docker/ghcr

  deploy_to_dev:
    name: Deploy to DEV
    needs: build_and_push
    runs-on: ubuntu-20.04
    if: success()
    steps:
      - uses: actions/checkout@v3
      - name: Get short SHA
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Set current commit SHA as image tag
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "deploy/helmfile/values/gcp/values.gcp-uk-dev.yaml"
          propertyPath: "image.tag"
          value: ${{ env.SHORT_SHA }}
          commitChange: false
          updateFile: true
          # message: Update image tag to ${{ env.SHORT_SHA }} [skip ci]
      - name: Connect to VPN
        uses: huma-engineering/huma-common-actions/openvpn-p81@v1.1.0
        with:
          configfile-url: https://api.perimeter81.com/api/networks/XkBbhFGBtm/tunnels/4rBJPOPWVX/openvpn-config/download
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
      - name: Login to ghcr
        run: helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      - name: Create kube config file
        run: |
          echo "${{ secrets.GCP_UK_DEV_KUBECONFIG }}" | base64 --decode > /tmp/config
      - name: Create diff (DEV)
        id: devdiffid
        uses: huma-engineering/huma-common-actions/helmfile-pr-diff@v1.1.0
        with:
          kubeconfig: /tmp/config
          helmfile-folder: deploy/helmfile
          helmfile-environment: gcp-uk-dev
      - name: Apply helmfile
        uses: huma-engineering/huma-common-actions/helmfile-apply@v1.1.0
        with:
          kubeconfig: /tmp/config
          helmfile-folder: deploy/helmfile
          helmfile-environment: gcp-uk-dev
          comment-id: ${{ steps.devdiffid.outputs.comment-id }}

  deploy_to_qa:
    name: Deploy to QA
    environment: QA
    needs: build_and_push
    runs-on: ubuntu-20.04
    if: success()
    steps:
      - uses: actions/checkout@v3
      - name: Get short SHA
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Set current commit SHA as image tag
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "deploy/helmfile/values/gcp/values.gcp-uk-qa.yaml"
          propertyPath: "image.tag"
          value: ${{ env.SHORT_SHA }}
          commitChange: false
          updateFile: true
          # message: Update image tag to ${{ env.SHORT_SHA }} [skip ci]
      - name: Connect to VPN
        uses: huma-engineering/huma-common-actions/openvpn-p81@v1.1.0
        with:
          configfile-url: https://api.perimeter81.com/api/networks/XkBbhFGBtm/tunnels/4rBJPOPWVX/openvpn-config/download
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
      - name: Login to ghcr
        run: helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      - name: Create kube config file
        run: |
          echo "${{ secrets.GCP_UK_QA_KUBECONFIG }}" | base64 --decode > /tmp/config
      - name: Create diff (QA)
        id: devdiffid
        uses: huma-engineering/huma-common-actions/helmfile-pr-diff@v1.1.0
        with:
          kubeconfig: /tmp/config
          helmfile-folder: deploy/helmfile
          helmfile-environment: gcp-uk-qa
      - name: Apply helmfile
        uses: huma-engineering/huma-common-actions/helmfile-apply@v1.1.0
        with:
          kubeconfig: /tmp/config
          helmfile-folder: deploy/helmfile
          helmfile-environment: gcp-uk-qa
          comment-id: ${{ steps.devdiffid.outputs.comment-id }}
